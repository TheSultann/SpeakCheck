const { Markup } = require('telegraf');
// –£–±–µ–¥–∏—Å—å, —á—Ç–æ ieltsQuestions.js –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í –≠–¢–û–ô –ñ–ï –ø–∞–ø–∫–µ (IELTS)
const ieltsQuestions = require('./ieltsQuestions'); // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Part 2 (–æ–±—ä–µ–∫—Ç)

// –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.js
let sharedFunctions = {};

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
const getPartsKeyboard = () => Markup.inlineKeyboard([
    [Markup.button.callback('Part 1', 'ielts_select_part_1')],
    [Markup.button.callback('Part 2 ', 'ielts_select_part_2')],
    [Markup.button.callback('Part 3 ', 'ielts_select_part_3')],
    [Markup.button.callback('‚ùå Cancel', 'ielts_cancel')]
]);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º Part 1 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const getPart1TopicsKeyboard = () => {
    const buttons = Object.keys(ieltsQuestions.part1).map(topicKey => [
        Markup.button.callback(
            ieltsQuestions.part1[topicKey].title,
            `ielts_select_topic_part1_${topicKey}`
        )
    ]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è Back to Parts', 'ielts_back_parts')]);
    return Markup.inlineKeyboard(buttons);
};

// ‚ú® –ò–ó–ú–ï–ù–ï–ù–û: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º Part 2 ‚ú®
const getPart2TopicsKeyboard = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–µ–º—ã –≤ Part 2
    if (!ieltsQuestions.part2 || Object.keys(ieltsQuestions.part2).length === 0) {
        return Markup.inlineKeyboard([
            [Markup.button.callback('No Part 2 topics available yet.', 'no_op')], // –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
            [Markup.button.callback('‚¨ÖÔ∏è Back to Parts', 'ielts_back_parts')]
        ]);
    }
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞ part2
    const buttons = Object.keys(ieltsQuestions.part2).map(topicKey => [
        Markup.button.callback(
            ieltsQuestions.part2[topicKey].title, // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã
            `ielts_select_topic_part2_${topicKey}` // Callback data —Å –∫–ª—é—á–æ–º —Ç–µ–º—ã
        )
    ]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è Back to Parts', 'ielts_back_parts')]); // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    return Markup.inlineKeyboard(buttons);
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º Part 3 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const getPart3TopicsKeyboard = () => {
    const buttons = Object.keys(ieltsQuestions.part3).map(topicKey => [
        Markup.button.callback(
            ieltsQuestions.part3[topicKey].title,
            `ielts_select_topic_part3_${topicKey}`
        )
    ]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è Back to Parts', 'ielts_back_parts')]);
    return Markup.inlineKeyboard(buttons);
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const getPracticeKeyboard = () => Markup.inlineKeyboard([
    [Markup.button.callback('‚èπÔ∏è Stop Practice', 'ielts_stop_practice')]
]);

// --- –õ–æ–≥–∏–∫–∞ ---
// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const startIeltsPractice = (ctx) => {
    ctx.session = {};
    ctx.reply('Choose IELTS Speaking Part:', getPartsKeyboard());
};

// ---- START OF MINIMALLY CORRECTED FUNCTION ----
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê –¢–û–õ–¨–ö–û 1 –°–¢–†–û–ö–ê)
const handleIeltsAnswerAndAskNext = async (ctx, userAnswerText) => {
    if (!ctx.session?.ieltsState?.waitingAnswer) return false;

    const state = ctx.session.ieltsState;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ ---
    if (userAnswerText && sharedFunctions.checkGrammar) {
        console.log(`[${ctx.chat?.id}] Checking grammar for IELTS answer (Part ${state.part})...`);
        try {
            // Call checkGrammar and expect an object { corrected_text, corrections } or null
            const grammarResult = await sharedFunctions.checkGrammar(userAnswerText);

            // Check if grammar check was successful AND if the corrected text is different from the original
            // Access the 'corrected_text' property from the result object
            // VVVVVVVVVV –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ VVVVVVVVVVVVVV
            if (grammarResult && grammarResult.corrected_text && grammarResult.corrected_text !== userAnswerText) {
                // Use grammarResult.corrected_text in the reply message
                await sharedFunctions.replyToUser(ctx,
                   `Your Answer Analysis:\n‚ùå Original:\n"${userAnswerText}"\n\n‚úÖ Suggestion:\n"${grammarResult.corrected_text}"`, // <-- –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢
                   { disable_notification: true }
                );
                // Optional TODO: You could add logic here to display detailed corrections
                // from grammarResult.corrections if you wanted to.
            // ^^^^^^^^^^ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ^^^^^^^^^^^^^^
            } else if (grammarResult) {
                // Answer seems correct or no significant changes were suggested by the API
                 console.log(`[${ctx.chat?.id}] Grammar check found no significant changes or answer is correct.`);
                 // You might want to uncomment the line below if you want feedback even for "correct" answers
                 // await sharedFunctions.replyToUser(ctx, `‚úÖ Your answer seems grammatically correct:\n"${userAnswerText}"`, { disable_notification: true });
            } else {
                 // Handle the case where checkGrammar returned null (e.g., API error)
                 console.warn(`[${ctx.chat?.id}] Grammar check failed or returned null for IELTS answer.`);
                 // Optionally inform the user, or just proceed without grammar feedback for this turn.
            }
        } catch (e) {
            console.error("Error during grammar check integration in IELTS handler:", e);
            // Handle potential errors during the check itself
        }
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ ---

    const currentPartKey = `part${state.part}`;

    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Part 2 ---
    if (state.part === 2) {
        // The rest of your Part 2 logic remains unchanged...
        await sharedFunctions.replyToUser(ctx, "OK, that's the end of Part 2.");
        await ctx.reply("Now, let's move to Part 3 discussion questions, or you can stop here.", Markup.inlineKeyboard([
             [Markup.button.callback('Go to Part 3 Topics', 'ielts_select_part_3_direct')], // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ Part 3
             [Markup.button.callback('Stop Practice', 'ielts_stop_practice')]
        ]));
        state.waitingAnswer = false;
        delete state.topicKey; // –ò—Å–ø–æ–ª—å–∑—É–µ–º topicKey –≤–º–µ—Å—Ç–æ cueCardIndex
        return true;
    }

    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Part 1 –∏ Part 3 ---
    if (state.part === 1 || state.part === 3) {
        // The rest of your Part 1 & 3 logic remains unchanged...
        const partQuestions = ieltsQuestions[currentPartKey];
        const topic = partQuestions?.[state.topicKey];

        if (!topic) {
            console.error(`IELTS state error: topic not found for Part ${state.part}`, state);
            ctx.session.ieltsState = null;
            await sharedFunctions.replyToUser(ctx, "Something went wrong with the topic. Stopping practice.");
            if (sharedFunctions.getMainMenuKeyboard) await ctx.reply('Choose an option:', sharedFunctions.getMainMenuKeyboard());
            return true;
        }

        const nextIndex = state.questionIndex + 1;

        if (nextIndex < topic.questions.length) { // –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            state.questionIndex = nextIndex;
            const nextQuestion = topic.questions[nextIndex];
            const totalQuestions = topic.questions.length;
            await sharedFunctions.replyToUser(ctx,
                `üìå Topic: ${topic.title}\n‚ùì Question ${nextIndex + 1}/${totalQuestions}:\n\n${nextQuestion}`,
                getPracticeKeyboard() // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π Stop
            );
        } else { // –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            await sharedFunctions.replyToUser(ctx, `üèÅ Topic "${topic.title}" finished!`);
            state.waitingAnswer = false;
            delete state.topicKey;
            delete state.questionIndex;

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏
            if (state.part === 1) {
                await ctx.reply('You can choose another Part 1 Topic below, or just send me any message to chat! üòä', getPart1TopicsKeyboard());
            } else { // state.part === 3
                await ctx.reply('You can choose another Part 3 Topic below, or stop the practice. üòâ', getPart3TopicsKeyboard());
            }
        }
        return true;
    }

    // Fallback error handling
    console.error("Reached end of handleIeltsAnswerAndAskNext without handling part:", state);
    ctx.session.ieltsState = null;
    await sharedFunctions.replyToUser(ctx, "An unexpected error occurred in practice logic.");
    return false; // –í–µ—Ä–Ω–µ–º false, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
};
// ---- END OF MINIMALLY CORRECTED FUNCTION ----


// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
const register = (botInstance, commonFuncs) => {
    sharedFunctions = commonFuncs;

    botInstance.action(/ielts_(.+)/, async (ctx) => {
        const action = ctx.match[1];
        ctx.session ??= {};

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const tryEditMessage = async (text, keyboard) => {
             try {
                 if (ctx.callbackQuery.message) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await ctx.editMessageText(text, keyboard).catch(async (e) => {
                         console.warn("Failed to edit message, sending new reply. Error:", e.description);
                         // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                         if (keyboard) await ctx.reply(text, keyboard); else await ctx.reply(text);
                    });
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                     if (keyboard) await ctx.reply(text, keyboard); else await ctx.reply(text);
                }
            } catch (e) {
                // –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ
                console.error("Error in tryEditMessage:", e);
                 await ctx.reply(text || "An error occurred.").catch(()=>{}); // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            }
        };


        try {
            // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ Cancel / Back / Stop ---
            if (action === 'cancel' || action === 'back_parts' || action === 'stop_practice') {
                let messageText = "IELTS practice cancelled or selection changed.";
                if (action === 'stop_practice') messageText = 'IELTS practice stopped.';
                if (action === 'back_parts') messageText = 'Returned to part selection.';

                await tryEditMessage(messageText); // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                ctx.session.ieltsState = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ IELTS

                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                 if (sharedFunctions.getMainMenuKeyboard) {
                     await ctx.reply("Alright! Feel free to send any message or use the button below to start a practice.", sharedFunctions.getMainMenuKeyboard());
                 }
                 if (!ctx.answered) await ctx.answerCbQuery().catch(()=>{}); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
                 return;
            }

            // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é ---
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —á–∞—Å—Ç—å/—Ç–µ–º—É, –ø–æ–∫–∞ –∏–¥–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞
            if ((action.startsWith('select_part_') || action.startsWith('select_topic_')) && ctx.session?.ieltsState?.waitingAnswer) {
                 await ctx.answerCbQuery("Please stop the current practice first ('Stop Practice' button).", { show_alert: true });
                 return; // –ù–µ –¥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            }

            // --- –í—ã–±–æ—Ä –ß–∞—Å—Ç–∏ ---
            if (action === 'select_part_1') {
                ctx.session.ieltsState = { part: 1 };
                await tryEditMessage('Choose Part 1 Topic:', getPart1TopicsKeyboard());
            }
            // ‚ú® –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–±–æ—Ä Part 2 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã ‚ú®
            else if (action === 'select_part_2') {
                 ctx.session.ieltsState = { part: 2 };
                 await tryEditMessage('Choose Part 2 Cue Card Topic:', getPart2TopicsKeyboard()); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—ã Part 2
            }
            // –í—ã–±–æ—Ä Part 3 (–∏–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ Part 2)
             else if (action === 'select_part_3' || action === 'select_part_3_direct') {
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è Part 3
                 if (!ieltsQuestions.part3 || Object.keys(ieltsQuestions.part3).length === 0) {
                    await ctx.answerCbQuery("Sorry, no Part 3 questions available yet.", { show_alert: true }); return;
                 }
                 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–∞—Å—Ç—å 3
                 ctx.session.ieltsState = { part: 3 }; // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Part 3
                 await tryEditMessage('Choose Part 3 Discussion Topic:', getPart3TopicsKeyboard());
             }

            // --- –í—ã–±–æ—Ä —Ç–µ–º—ã Part 1 ---
            else if (action.startsWith('select_topic_part1_')) {
                const topicKey = action.replace('select_topic_part1_', '');
                const partState = ctx.session.ieltsState;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Part 1 –∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (partState?.part === 1 && ieltsQuestions.part1[topicKey]?.questions?.length > 0) {
                    partState.topicKey = topicKey; partState.questionIndex = 0; partState.waitingAnswer = true;
                    const topic = ieltsQuestions.part1[topicKey];
                    const firstQuestion = topic.questions[0]; const totalQuestions = topic.questions.length;
                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫—É Stop
                    await tryEditMessage(`üìå Topic: ${topic.title}\n‚ùì Question 1/${totalQuestions}:\n\n${firstQuestion}`, getPracticeKeyboard());
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞
                    await ctx.answerCbQuery('Error selecting topic or topic is empty.');
                    ctx.session.ieltsState = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await tryEditMessage('Choose IELTS Speaking Part:', getPartsKeyboard()).catch(()=>{}); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–∏
                 }
            }
            // ‚ú® –ò–ó–ú–ï–ù–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã Part 2 ‚ú®
            else if (action.startsWith('select_topic_part2_')) {
                const topicKey = action.replace('select_topic_part2_', '');
                const partState = ctx.session.ieltsState;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Part 2 –∏ —Ç–µ–º–∞/–∫–∞—Ä—Ç–æ—á–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (partState?.part === 2 && ieltsQuestions.part2[topicKey]?.card) {
                    partState.topicKey = topicKey; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–ª—é—á —Ç–µ–º—ã
                    partState.waitingAnswer = true; // –ù–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç

                    const cueCardData = ieltsQuestions.part2[topicKey];
                    const cueCardText = cueCardData.card; // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏

                    // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º, —Å–æ–æ–±—â–∞—è –æ –Ω–∞—á–∞–ª–µ Part 2
                    await tryEditMessage(`Part 2: Cue Card\nTopic: ${cueCardData.title}\n\nYou have 1 minute to prepare your answer.`);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π Stop
                    await ctx.reply(cueCardText, getPracticeKeyboard());
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—É—Å—Ç–∞
                    await ctx.answerCbQuery('Error selecting Part 2 topic or topic is empty.');
                    ctx.session.ieltsState = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await tryEditMessage('Choose IELTS Speaking Part:', getPartsKeyboard()).catch(()=>{}); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–∏
                }
            }
            // --- –í—ã–±–æ—Ä —Ç–µ–º—ã Part 3 ---
            else if (action.startsWith('select_topic_part3_')) {
                 const topicKey = action.replace('select_topic_part3_', '');
                 const partState = ctx.session.ieltsState;
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Part 3 –∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 if (partState?.part === 3 && ieltsQuestions.part3[topicKey]?.questions?.length > 0) {
                    partState.topicKey = topicKey; partState.questionIndex = 0; partState.waitingAnswer = true;
                    const topic = ieltsQuestions.part3[topicKey];
                    const firstQuestion = topic.questions[0]; const totalQuestions = topic.questions.length;
                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫—É Stop
                    await tryEditMessage(`üìå Topic: ${topic.title}\n‚ùì Question 1/${totalQuestions}:\n\n${firstQuestion}`, getPracticeKeyboard());
                 } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞
                    await ctx.answerCbQuery('Error selecting topic or topic is empty.');
                    ctx.session.ieltsState = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await tryEditMessage('Choose IELTS Speaking Part:', getPartsKeyboard()).catch(()=>{}); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–∏
                  }
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, alert)
             if (!ctx.answered) {
                await ctx.answerCbQuery().catch(()=>{}); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
             }

        } catch (error) {
             console.error('Error handling IELTS action:', error);
             if (!ctx.answered) await ctx.answerCbQuery('Sorry, an error occurred.').catch(()=>{}); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –æ—à–∏–±–∫–æ–π
             ctx.session.ieltsState = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
              // –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–∏
              try { await tryEditMessage('An error occurred. Choose IELTS Speaking Part:', getPartsKeyboard()).catch(()=>{}); } catch(e){}
        }
    });
};

module.exports = { register, startIeltsPractice, handleIeltsAnswerAndAskNext };